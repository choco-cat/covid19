[{"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\index.js":"1","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\root\\index.js":"2","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\api\\covid.js":"3","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\constants\\filters.js":"4","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\api\\flags.js":"5","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\calculations.js":"6","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\index.js":"7","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\countryList\\index.js":"8","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\graph\\index.js":"9","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\worldMap\\index.js":"10","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\sorting.js":"11","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\constants\\missed.js":"12","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\graph\\chart\\index.js":"13","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\worldMap\\map\\index.js":"14","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\table.js":"15","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\tdItem.js":"16","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\selectFilters.js":"17"},{"size":246,"mtime":1607582936294,"results":"18","hashOfConfig":"19"},{"size":4151,"mtime":1608203316270,"results":"20","hashOfConfig":"19"},{"size":3499,"mtime":1608202428364,"results":"21","hashOfConfig":"19"},{"size":305,"mtime":1608202428394,"results":"22","hashOfConfig":"19"},{"size":948,"mtime":1608202428367,"results":"23","hashOfConfig":"19"},{"size":2588,"mtime":1608202428398,"results":"24","hashOfConfig":"19"},{"size":1389,"mtime":1608203176177,"results":"25","hashOfConfig":"19"},{"size":6176,"mtime":1608202779623,"results":"26","hashOfConfig":"19"},{"size":378,"mtime":1608203241687,"results":"27","hashOfConfig":"19"},{"size":359,"mtime":1608203176183,"results":"28","hashOfConfig":"19"},{"size":230,"mtime":1608117143863,"results":"29","hashOfConfig":"19"},{"size":1800,"mtime":1608117143859,"results":"30","hashOfConfig":"19"},{"size":1149,"mtime":1608202428375,"results":"31","hashOfConfig":"19"},{"size":2279,"mtime":1608202428586,"results":"32","hashOfConfig":"19"},{"size":730,"mtime":1608203176179,"results":"33","hashOfConfig":"19"},{"size":104,"mtime":1608203176181,"results":"34","hashOfConfig":"19"},{"size":891,"mtime":1608202428400,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"q1ji1j",{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\index.js",[],["73","74"],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\root\\index.js",["75","76","77"],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\api\\covid.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\constants\\filters.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\api\\flags.js",["78"],"import axios from 'axios';\r\n\r\nconst cache = {};\r\n\r\n//TODO добавить обработчик ошибок\r\n\r\n/*\r\nСписок флагов\r\nВозвращает массив из объектов вида data[n], флаг - data[n].flag, название страны - data[n].name, население - data[n].population\r\n*/\r\n\r\nexport const getFlags = async () => {\r\n    const url =  'https://restcountries.eu/rest/v2/all?fields=name;population;flag';\r\n    const { data: flags } = await axios.get(url);\r\n    return flags;\r\n};\r\n\r\n/*\r\nВозвращает количество населения страны country_slug\r\n*/\r\n\r\nexport const getPopulationCountry = async (country_slug) => {\r\n    const url =  `https://restcountries.eu/rest/v2/name/${country_slug}`;\r\n    const { data: country } = await axios.get(url);\r\n    const [result] = country.filter((el) => el.name.toLowerCase() === country_slug);\r\n\r\n    return result.population;\r\n};\r\n","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\calculations.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\index.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\countryList\\index.js",["79"],"import React from 'react';\r\nimport { missedFlags, missedPopulations } from '../../constants/missed';\r\nimport { sortByParameter } from '../../services/sorting';\r\nimport { filters } from \"../../constants/filters\";\r\n\r\nconst sortParameters = {\r\n    'total cases': 'TotalConfirmed',\r\n    'new cases': 'NewConfirmed',\r\n    'total deaths': 'TotalDeaths',\r\n    'new deaths': 'NewDeaths',\r\n    'total recovered': 'TotalRecovered',\r\n    'new recovered': 'NewRecovered',\r\n    'total cases per 100k': 'TotalConfirmedPerPopulation',\r\n    'new cases per 100k': 'NewConfirmedPerPopulation',\r\n    'total deaths per 100k': 'TotalDeathsPerPopulation',\r\n    'new deaths per 100k': 'NewDeathsPerPopulation',\r\n    'total recovered per 100k': 'TotalRecoveredPerPopulation',\r\n    'new recovered per 100k': 'NewRecoveredPerPopulation',\r\n};\r\n\r\nclass CountryList extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            sortedBy: 'total cases',\r\n            status: '',\r\n            period: '',\r\n            relative: '',\r\n            filterText: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n              sortedBy: 'total cases',\r\n              status: this.props.filters.status,\r\n              period: this.props.filters.period,\r\n              relative: this.props.filters.relative,\r\n              filterText: ''\r\n          })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.sortedBy !== this.state.sortedBy) {\r\n            this.props.updateFilter({\r\n                status: this.state.status,\r\n                period: this.state.period,\r\n                relative: this.state.relative,\r\n                sortedBy: this.state.sortedBy,\r\n            });\r\n        }\r\n    }\r\n\r\n    makeList(data = []) {\r\n        const { sortedBy } = this.state;\r\n\r\n        return sortByParameter(data, sortParameters[sortedBy]).map((item, index) => {\r\n            const { Country, flag } = item;\r\n            const amount = item[sortParameters[sortedBy]];\r\n\r\n            return (\r\n                <li className=\"country-list-item\" key={index} onClick={() => this.props.handleClickOnCountry(Country)}>\r\n                    <img className=\"country-list-item-flag\" src={flag} alt=\"flag\"/>\r\n                    <span className=\"country-list-item-country\">{Country} </span>\r\n                    {amount}\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    onSortChange = (sortedBy) => {\r\n        //TODO Отрефакторить\r\n        switch (sortedBy) {\r\n            case 'total cases':\r\n                this.setState({ sortedBy: 'new cases', status: filters.status.confirmed, relative: filters.relative.absolute, period: filters.period.lastDay } );\r\n                break;\r\n            case 'new cases':\r\n                this.setState({ sortedBy: 'total deaths', status: filters.status.deaths, relative: filters.relative.absolute, period: filters.period.all } );\r\n                break;\r\n            case 'total deaths':\r\n                this.setState({ sortedBy: 'new deaths', status: filters.status.deaths, relative: filters.relative.absolute, period: filters.period.lastDay } );\r\n                break;\r\n            case 'new deaths':\r\n                this.setState({ sortedBy: 'total recovered', status: filters.status.recovered, relative: filters.relative.absolute, period: filters.period.all } );\r\n                break;\r\n            case 'total recovered':\r\n                this.setState({ sortedBy: 'new recovered', status: filters.status.recovered, relative: filters.relative.absolute, period: filters.period.lastDay });\r\n                break;\r\n            case 'new recovered':\r\n                this.setState({ sortedBy: 'total cases per 100k', status: filters.status.confirmed, relative: filters.relative.to100men, period: filters.period.all } );\r\n                break;\r\n            case 'total cases per 100k':\r\n                this.setState({ sortedBy: 'new cases per 100k', status: filters.status.confirmed, relative: filters.relative.to100men, period: filters.period.lastDay } );\r\n                break;\r\n            case 'new cases per 100k':\r\n                this.setState({ sortedBy: 'total deaths per 100k', status: filters.status.deaths, relative: filters.relative.to100men, period: filters.period.all } );\r\n                break;\r\n            case 'total deaths per 100k':\r\n                this.setState({ sortedBy: 'new deaths per 100k', status: filters.status.deaths, relative: filters.relative.to100men, period: filters.period.lastDay } );\r\n                break;\r\n            case 'new deaths per 100k':\r\n                this.setState({ sortedBy: 'total recovered per 100k', status: filters.status.recovered, relative: filters.relative.to100men, period: filters.period.all } );\r\n                break;\r\n            case 'total recovered per 100k':\r\n                this.setState({ sortedBy: 'new recovered per 100k', status: filters.status.recovered, relative: filters.relative.to100men, period: filters.period.lastDay } );\r\n                break;\r\n            case 'new recovered per 100k':\r\n                this.setState({ sortedBy: 'total cases', status: filters.status.confirmed, relative: filters.relative.absolute, period: filters.period.all } );\r\n                break;\r\n        }\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({filterText: e.target.value});\r\n    };\r\n\r\n    render() {\r\n        const { summaries = [], flags = [] } = this.props;\r\n        const { sortedBy, filterText } = this.state;\r\n\r\n        let data = summaries.map((country) => {\r\n            const [selectedCountry] = flags.filter(item => item.name === country.Country);\r\n            const population = selectedCountry ? selectedCountry.population : missedPopulations[country.Country];\r\n\r\n            return {\r\n                ...country,\r\n                flag: selectedCountry ? selectedCountry.flag : missedFlags[country.Country],\r\n                population,\r\n                TotalConfirmedPerPopulation: Math.round((country.TotalConfirmed * 100000) / population),\r\n                NewConfirmedPerPopulation: Math.round((country.NewConfirmed * 100000) / population),\r\n                TotalDeathsPerPopulation: Math.round((country.TotalDeaths * 100000) / population),\r\n                NewDeathsPerPopulation: Math.round((country.NewDeaths * 100000) / population),\r\n                TotalRecoveredPerPopulation: Math.round((country.TotalRecovered * 100000) / population),\r\n                NewRecoveredPerPopulation: Math.round((country.NewRecovered * 100000) / population),\r\n            }\r\n        });\r\n\r\n\r\n        if (filterText !== '') {\r\n            data = data.filter(el => el['Country'].toLowerCase().includes(filterText.toLowerCase()))\r\n        }\r\n\r\n        let listItems = this.makeList(data);\r\n\r\n        return (\r\n            <div className=\"country-list-container\">\r\n                <h2>\r\n                    <span>Sorted by </span>\r\n                    <span onClick={() => this.onSortChange(sortedBy)} className=\"country-list-sortBy\">{sortedBy}</span>\r\n                </h2>\r\n                <input onChange={this.onInputChange} type=\"text\" />\r\n                <ul className=\"country-list\">\r\n                    {listItems}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryList;\r\n","N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\graph\\index.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\worldMap\\index.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\sorting.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\constants\\missed.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\graph\\chart\\index.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\worldMap\\map\\index.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\table.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\components\\summary\\tdItem.js",[],"N:\\RSSchool\\choco-cat-JS2020Q3\\covid19\\src\\services\\selectFilters.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":27},{"ruleId":"84","severity":1,"message":"88","line":9,"column":19,"nodeType":"86","messageId":"87","endLine":9,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":75,"column":6,"nodeType":"91","endLine":75,"endColumn":78,"suggestions":"92"},{"ruleId":"84","severity":1,"message":"93","line":3,"column":7,"nodeType":"86","messageId":"87","endLine":3,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":74,"column":9,"nodeType":"96","messageId":"97","endLine":111,"endColumn":10},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'getCovidCountries' is defined but never used.","Identifier","unusedVar","'getDataWorldLastDay' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'flags'. Either include it or remove the dependency array.","ArrayExpression",["100"],"'cache' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [indicatorsForFilter, summaries, dataWorldFromDays, dataCountryFromDays, flags]",{"range":"103","text":"104"},[2789,2861],"[indicatorsForFilter, summaries, dataWorldFromDays, dataCountryFromDays, flags]"]
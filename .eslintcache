[{"C:\\RSS\\covid19\\src\\index.js":"1","C:\\RSS\\covid19\\src\\components\\root\\index.js":"2","C:\\RSS\\covid19\\src\\api\\covid.js":"3","C:\\RSS\\covid19\\src\\api\\flags.js":"4","C:\\RSS\\covid19\\src\\components\\summary\\index.js":"5","C:\\RSS\\covid19\\src\\components\\countryList\\index.js":"6","C:\\RSS\\covid19\\src\\components\\graph\\index.js":"7","C:\\RSS\\covid19\\src\\components\\WorldMap\\index.js":"8","C:\\RSS\\covid19\\src\\components\\graph\\chart\\index.js":"9","C:\\RSS\\covid19\\src\\components\\WorldMap\\map\\index.js":"10"},{"size":246,"mtime":1607795417173,"results":"11","hashOfConfig":"12"},{"size":1283,"mtime":1607795417169,"results":"13","hashOfConfig":"12"},{"size":5452,"mtime":1607795417154,"results":"14","hashOfConfig":"12"},{"size":841,"mtime":1607795417155,"results":"15","hashOfConfig":"12"},{"size":729,"mtime":1607795417172,"results":"16","hashOfConfig":"12"},{"size":7345,"mtime":1607864170160,"results":"17","hashOfConfig":"12"},{"size":284,"mtime":1607795417167,"results":"18","hashOfConfig":"12"},{"size":312,"mtime":1607795417157,"results":"19","hashOfConfig":"12"},{"size":1204,"mtime":1607795417165,"results":"20","hashOfConfig":"12"},{"size":2101,"mtime":1607795417161,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"12190kl",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\RSS\\covid19\\src\\index.js",[],["45","46"],"C:\\RSS\\covid19\\src\\components\\root\\index.js",["47","48"],"import React, { useState, useEffect } from 'react';\r\nimport { getCovidCountries, getSummaries } from '../../api/covid';\r\nimport { getFlags } from \"../../api/flags\";\r\nimport Summary from '../summary';\r\nimport CountryList from '../countryList';\r\nimport WorldMap from '../WorldMap';\r\nimport Graph from '../graph';\r\n\r\nimport './index.css';\r\n\r\nconst Root = () => {\r\n  const [countries, setCountries] = useState( []);\r\n  const [summaries, setSummaries] = useState( {});\r\n  const [flags, setFlags] = useState( []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await getCovidCountries();\r\n      const summariesResult = await getSummaries();\r\n      const flags = await getFlags();\r\n\r\n      setCountries(result);\r\n      setSummaries(summariesResult);\r\n      setFlags(flags)\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getDataForCountry = async (country) => {\r\n    // click on country\r\n  };\r\n\r\n  return (\r\n      <div className=\"main-container\">\r\n        <CountryList summaries={summaries.Countries} flags={flags}/>\r\n        <WorldMap summaries={summaries.Countries} />\r\n        <div className=\"summary-container\">\r\n          <Summary summaries={summaries.Global}/>\r\n          <Graph />\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","C:\\RSS\\covid19\\src\\api\\covid.js",["49"],"import axios from 'axios';\r\nimport { parse, compareAsc, format, addDays, endOfToday } from 'date-fns';\r\nimport { getPopulationCountry } from './flags';\r\n\r\nconst BASE_URL = 'https://api.covid19api.com/';\r\n\r\n//TODO добавить обработчик ошибок\r\n\r\n/*\r\nСписок стран\r\nВозвращает массив из объектов вида data[n], country_slug - data[n].Slug, название страны - data[n].Country\r\n*/\r\nexport const getCovidCountries = async () => {\r\n  const endPointCountries = 'countries';\r\n  const { data: countries } = await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  return countries;\r\n};\r\n\r\n/*\r\nВозвращает статистику всех статусов по стране по всем датам, массив объектов вида\r\n{\r\nCountry: \"China\",\r\nCountryCode: \"\",\r\nCityCode: \"\",\r\nLat: \"0\",\r\nLon: \"0\",\r\nConfirmed: 94025,\r\nDeaths: 4748,\r\nRecovered: 87707,\r\nActive: 1570,\r\nDate: \"2020-12-10T00:00:00Z\"\r\n}\r\n*/\r\nexport const getDataCountry = async (country_slug) => {\r\n  const endPointCountries = `total/country/${country_slug}`;\r\n  const { data: summaries } =  await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  return summaries;\r\n};\r\n\r\n/* Возвращает данные по стране за последний день, объект типа:\r\n{\r\nActive: 1570\r\nCityCode: \"\"\r\nConfirmed: 94025\r\nCountry: \"China\"\r\nCountryCode: \"\"\r\nDate: \"2020-12-10T00:00:00Z\"\r\nDeaths: 4748\r\nRecovered: 87707\r\n}\r\n*/\r\nexport const getDataCountryLastDay = async (country_slug) => {\r\n  const currentDate = endOfToday();\r\n  const yesterday = addDays(currentDate, -1);\r\n  const endPointCountries = `total/country/${country_slug}?from=${format(yesterday, 'Y-MM-dd')}&to=${format(currentDate,'Y-MM-dd')}`;\r\n  const { data: summaries } =  await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  return summaries[0];\r\n};\r\n\r\n/* Возвращает статистику всех статусов по всему миру по всем датам, массив объектов вида\r\n{\r\nDate: Tue Jan 28 2020 00:01:00 GMT+0300 (Moscow Standard Time)\r\nNewConfirmed: 87137\r\nNewDeaths: 8726\r\nNewRecovered: 27085\r\nConfirmed: 2155152\r\nDeaths: 149156\r\nRecovered: 490147\r\n}\r\n*/\r\nexport const getDataWorld = async () => {\r\n  const endPointCountries = 'world';\r\n  const { data: summaries } =  await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  summaries.sort((a, b) => a.TotalConfirmed > b.TotalConfirmed ? 1 : -1);\r\n  const date = parse('22-01-2020', 'dd-mm-yyyy', new Date());\r\n  summaries.map((el, index) => {\r\n    el.Date = addDays(date, index);\r\n    el.Confirmed = el.TotalConfirmed;\r\n    el.Deaths = el.TotalDeaths;\r\n    el.Recovered = el.TotalRecovered;\r\n    return el;\r\n  });\r\n  return summaries;\r\n};\r\n\r\n/* Возвращает данные по миру за последний день, объект типа:\r\n{\r\nNewConfirmed: 668755\r\nNewDeaths: 12540\r\nNewRecovered: 425817\r\nConfirmed: 68884181\r\nDeaths: 1569277\r\nRecovered: 44373880\r\n}\r\n */\r\nexport const getDataWorldLastDay = async () => {\r\n  const currentDate = endOfToday();\r\n  const yesterday = addDays(currentDate, -1);\r\n  const endPointCountries = `world?from=${format(yesterday, 'Y-MM-dd')}&to=${format(currentDate,'Y-MM-dd')}`;\r\n  const { data: summaries } =  await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  summaries.map((el) => {\r\n    el.Date = currentDate;\r\n    el.Confirmed = el.TotalConfirmed;\r\n    el.Deaths = el.TotalDeaths;\r\n    el.Recovered = el.TotalRecovered;\r\n    return el;\r\n  });\r\n  return summaries[0];\r\n};\r\n\r\n//Итоговые данные по миру\r\nexport const getSummaries = async () => {\r\n  const endPointCountries = 'summary';\r\n  const { data: summaries } =  await axios.get(`${BASE_URL}${endPointCountries}`);\r\n  summaries.Countries.map((el) => {\r\n    el.Confirmed = el.TotalConfirmed;\r\n    el.Deaths = el.TotalDeaths;\r\n    el.Recovered = el.TotalRecovered;\r\n    return el;\r\n  });\r\n  return summaries;\r\n};\r\n\r\n/*\r\nВозвращает статистику всех статусов по миру по всем датам на 100 тыс. населения, массив объектов вида\r\n{\r\nCountry: \"China\",\r\nCountryCode: \"\",\r\nCityCode: \"\",\r\nLat: \"0\",\r\nLon: \"0\",\r\nConfirmed: 0.08,\r\nDeaths: 0.056,\r\nRecovered: 0.023,\r\nDate: \"2020-12-10T00:00:00Z\"\r\n}\r\n*/\r\nexport const getDataWorld100 = async () => {\r\n  const populationWorld = 7 * 10**9;\r\n  const data = await getDataWorld();\r\n  calc100Men(data, populationWorld);\r\n  return data;\r\n};\r\n\r\n/*\r\nВозвращает статистику всех статусов по стране по всем датам на 100 тыс. населения, массив объектов вида\r\n{\r\nCountry: \"China\",\r\nCountryCode: \"\",\r\nCityCode: \"\",\r\nLat: \"0\",\r\nLon: \"0\",\r\nConfirmed: 0.08,\r\nDeaths: 0.056,\r\nRecovered: 0.023,\r\nDate: \"2020-12-10T00:00:00Z\"\r\n}\r\ncountry_slug = название страны, все маленькие буквы\r\n*/\r\nexport const getDataCountry100 = async (country_slug) => {\r\n  const data = await getDataCountry(country_slug);\r\n  const population = await getPopulationCountry(country_slug);\r\n  calc100Men(data, population);\r\n  return data;\r\n};\r\n\r\n\r\nconst calc100Men = (data, population) => {\r\n  return data.map((el) => {\r\n    el.Confirmed = el.Confirmed / (population / 10 ** 5);\r\n    el.Deaths = el.Deaths / (population / 10 ** 5);\r\n    el.Recovered = el.Recovered / (population / 10 ** 5);\r\n    return el;\r\n  });\r\n}\r\n","C:\\RSS\\covid19\\src\\api\\flags.js",[],"C:\\RSS\\covid19\\src\\components\\summary\\index.js",[],"C:\\RSS\\covid19\\src\\components\\countryList\\index.js",["50"],"C:\\RSS\\covid19\\src\\components\\graph\\index.js",[],"C:\\RSS\\covid19\\src\\components\\WorldMap\\index.js",[],"C:\\RSS\\covid19\\src\\components\\graph\\chart\\index.js",[],"C:\\RSS\\covid19\\src\\components\\WorldMap\\map\\index.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":12,"column":10,"nodeType":"57","messageId":"58","endLine":12,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":30,"column":9,"nodeType":"57","messageId":"58","endLine":30,"endColumn":26},{"ruleId":"55","severity":1,"message":"60","line":2,"column":17,"nodeType":"57","messageId":"58","endLine":2,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":92,"column":9,"nodeType":"63","messageId":"64","endLine":129,"endColumn":10},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'countries' is assigned a value but never used.","Identifier","unusedVar","'getDataForCountry' is assigned a value but never used.","'compareAsc' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]
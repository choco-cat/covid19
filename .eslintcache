[{"/media/Work/rs-school/covid19/covid19/src/index.js":"1","/media/Work/rs-school/covid19/covid19/src/components/root/index.js":"2","/media/Work/rs-school/covid19/covid19/src/api/covid.js":"3","/media/Work/rs-school/covid19/covid19/src/api/flags.js":"4","/media/Work/rs-school/covid19/covid19/src/components/graph/index.js":"5","/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js":"6","/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js":"7","/media/Work/rs-school/covid19/covid19/src/constants/filters.js":"8","/media/Work/rs-school/covid19/covid19/src/constants/missed.js":"9","/media/Work/rs-school/covid19/covid19/src/services/sorting.js":"10","/media/Work/rs-school/covid19/covid19/src/components/summary/index.js":"11","/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js":"12","/media/Work/rs-school/covid19/covid19/src/components/summary/table.js":"13","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js":"14","/media/Work/rs-school/covid19/covid19/src/components/summary/tdItem.js":"15","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/tooltip.js":"16","/media/Work/rs-school/covid19/covid19/src/services/calculations.js":"17","/media/Work/rs-school/covid19/covid19/src/services/selectFilters.js":"18","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/legend.js":"19"},{"size":234,"mtime":1607690845456,"results":"20","hashOfConfig":"21"},{"size":3827,"mtime":1608283892735,"results":"22","hashOfConfig":"21"},{"size":3392,"mtime":1608281582520,"results":"23","hashOfConfig":"21"},{"size":920,"mtime":1608210249564,"results":"24","hashOfConfig":"21"},{"size":397,"mtime":1608281582521,"results":"25","hashOfConfig":"21"},{"size":6136,"mtime":1608371941630,"results":"26","hashOfConfig":"21"},{"size":1957,"mtime":1608281582521,"results":"27","hashOfConfig":"21"},{"size":289,"mtime":1608210249567,"results":"28","hashOfConfig":"21"},{"size":1761,"mtime":1608024900508,"results":"29","hashOfConfig":"21"},{"size":226,"mtime":1608287961667,"results":"30","hashOfConfig":"21"},{"size":6126,"mtime":1608396721256,"results":"31","hashOfConfig":"21"},{"size":298,"mtime":1608281582522,"results":"32","hashOfConfig":"21"},{"size":863,"mtime":1608302891035,"results":"33","hashOfConfig":"21"},{"size":3853,"mtime":1608281582522,"results":"34","hashOfConfig":"21"},{"size":101,"mtime":1608210249566,"results":"35","hashOfConfig":"21"},{"size":1208,"mtime":1608281582523,"results":"36","hashOfConfig":"21"},{"size":2635,"mtime":1608377187670,"results":"37","hashOfConfig":"21"},{"size":854,"mtime":1608210249577,"results":"38","hashOfConfig":"21"},{"size":722,"mtime":1608281582523,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"90qc0p",{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/media/Work/rs-school/covid19/covid19/src/index.js",[],["81","82"],"/media/Work/rs-school/covid19/covid19/src/components/root/index.js",["83","84","85"],"import React, { useState, useEffect } from 'react';\nimport { getCovidCountries, getSummaries, getDataWorldFromDays, getDataCountryFromDays } from '../../api/covid';\nimport { getFlags } from \"../../api/flags\";\nimport { filters } from \"../../constants/filters\";\nimport Summary from '../summary';\nimport CountryList from '../countryList';\nimport WorldMap from '../worldMap';\nimport Graph from '../graph';\nimport { getData, getDataWorldLastDay } from '../../services/calculations';\nimport { missedPopulations, missedFlags } from '../../constants/missed';\nimport '../../styles/main.scss';\n\nconst Root = () => {\n  const [summaries, setSummaries] = useState({});\n  const [flags, setFlags] = useState([]);\n  const [dataWorldFromDays, setDataWorld] = useState([]);\n  const [dataCountryFromDays, setDataCountry] = useState([]);\n  const [dataAll, setDataAll] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [indicatorsForFilter, updateIndicators] = useState({\n    status: filters.status.confirmed,\n    period: filters.period.all,\n    relative: filters.relative.absolute,\n    geography: filters.geography,\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const summariesResult = await getSummaries();\n      const dataWorldFromDaysResult = await getDataWorldFromDays();\n      const flagsResult = await getFlags();\n\n      summariesResult.Countries = summariesResult.Countries.map(country => {\n        return {\n          ...country,\n          population: missedPopulations[country.Country] || flagsResult.find(flag => flag.name === country.Country).population,\n          flag: missedFlags[country.Country] || flagsResult.find(flag => flag.name === country.Country).flag,\n        }\n      });\n\n      setSummaries(summariesResult);\n      setDataWorld(dataWorldFromDaysResult);\n      setFlags(flagsResult);\n      setIsLoaded(true);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (indicatorsForFilter.geography) {\n      const country = indicatorsForFilter.geography;\n      const population = missedPopulations[country] || flags.find(flag => flag.name === country).population;\n      setDataAll(getData(dataCountryFromDays, indicatorsForFilter, population));\n    } else {\n      setDataAll(getData(dataWorldFromDays, indicatorsForFilter));\n    }\n\n  }, [indicatorsForFilter, summaries, dataWorldFromDays, dataCountryFromDays]);\n\n  const updateFilter = (newFilterParams) => {\n    updateIndicators({\n      ...indicatorsForFilter,\n      ...newFilterParams\n    });\n  };\n\n  const getDataForCountry = async (country) => {\n    //Тут уже страна выбрана\n    updateIndicators({\n      ...indicatorsForFilter,\n      geography: country\n    });\n\n    const dataCountryFromDaysResult = await getDataCountryFromDays(country);\n    setDataCountry(dataCountryFromDaysResult);\n  };\n\n    return (\n      <div className=\"main-container\">\n        {\n          !isLoaded ? (\n            <div>Loading...</div>\n          ) : (\n            <>\n              <CountryList\n                summaries={summaries.Countries}\n                flags={flags}\n                filters={indicatorsForFilter}\n                updateFilter={updateFilter}\n                handleClickOnCountry={getDataForCountry}\n              />\n              <WorldMap summaries={summaries.Countries} filters={indicatorsForFilter}\n                        handleClickOnCountry={getDataForCountry}/>\n              <div className=\"summary-container\">\n                <Summary \n                  summaries={summaries.Global} \n                  summariesCountries = {summaries.Countries}\n                  filters={indicatorsForFilter}\n                />\n                <Graph dataWorld={dataAll} filters={indicatorsForFilter}/>\n              </div>\n            </>\n          )\n        }\n      </div>\n    );\n  };\n\nexport default Root;\n","/media/Work/rs-school/covid19/covid19/src/api/covid.js",[],"/media/Work/rs-school/covid19/covid19/src/api/flags.js",[],"/media/Work/rs-school/covid19/covid19/src/components/graph/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js",["86","87"],"import React from 'react';\nimport { missedFlags, missedPopulations } from '../../constants/missed';\nimport { sortByParameter } from '../../services/sorting';\nimport { filters } from \"../../constants/filters\";\nimport { getSelectFilters } from \"../../services/selectFilters\";\n\nconst sortParameters = {\n    'total cases': 'TotalConfirmed',\n    'new cases': 'NewConfirmed',\n    'total deaths': 'TotalDeaths',\n    'new deaths': 'NewDeaths',\n    'total recovered': 'TotalRecovered',\n    'new recovered': 'NewRecovered',\n    'total cases per 100k': 'TotalConfirmedPerPopulation',\n    'new cases per 100k': 'NewConfirmedPerPopulation',\n    'total deaths per 100k': 'TotalDeathsPerPopulation',\n    'new deaths per 100k': 'NewDeathsPerPopulation',\n    'total recovered per 100k': 'TotalRecoveredPerPopulation',\n    'new recovered per 100k': 'NewRecoveredPerPopulation',\n};\n\nclass CountryList extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            sortedBy: 'total cases',\n            status: '',\n            period: '',\n            relative: '',\n            filterText: '',\n            geography: '',\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            sortedBy: 'total cases',\n            status: this.props.filters.status,\n            period: this.props.filters.period,\n            relative: this.props.filters.relative,\n            geography: this.props.filters.geography,\n            filterText: '',\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.sortedBy !== this.state.sortedBy) {\n            this.props.updateFilter({\n                status: this.state.status,\n                period: this.state.period,\n                relative: this.state.relative,\n                sortedBy: this.state.sortedBy,\n            });\n        }\n        if (this.props.filters.geography !== this.state.geography) this.setState({geography: this.props.filters.geography})\n    }\n\n    makeList(data = []) {\n        const { sortedBy } = this.state;\n\n        const userLang = navigator.language;\n\n        return sortByParameter(data, sortParameters[sortedBy]).map((item, index) => {\n            const { Country, flag } = item;\n            const { geography } = this.state;\n            let amount = item[sortParameters[sortedBy]];\n            amount = new Intl.NumberFormat(userLang, { minimumFractionDigits: 0, maximumFractionDigits: 2}).format(amount);\n\n            return (\n                <li className={`country-list-item ${geography === Country ? 'country-list-item_selected' : ''}`} key={index} onClick={() => this.onCountryClick(Country)}>\n                    <img className=\"country-list-item-flag\" src={flag} alt=\"flag\"/>\n                    <span className=\"country-list-item-country\">{Country} </span>\n                    {amount}\n                </li>\n            )\n        })\n    }\n\n    onSelectChange = (e) => {\n        const optionNumber = e.target.selectedIndex;\n        const { status, period, relative } = getSelectFilters(optionNumber);\n        this.setState({sortedBy: e.target.value, status, period, relative});\n    };\n\n    onInputChange = (e) => {\n        this.setState({filterText: e.target.value});\n    };\n\n    onCountryClick = (Country) => {\n        this.setState({geography: Country});\n        this.props.handleClickOnCountry(Country);\n    }\n\n    render() {\n        const { summaries = [], flags = [] } = this.props;\n        const { sortedBy, filterText } = this.state;\n\n        let data = summaries.map((country) => {\n            const [geography] = flags.filter(item => item.name === country.Country);\n            const population = geography ? geography.population : missedPopulations[country.Country];\n\n            return {\n                ...country,\n                flag: geography ? geography.flag : missedFlags[country.Country],\n                population,\n                TotalConfirmedPerPopulation: ((country.TotalConfirmed * 100000) / population),\n                NewConfirmedPerPopulation: ((country.NewConfirmed * 100000) / population),\n                TotalDeathsPerPopulation: ((country.TotalDeaths * 100000) / population),\n                NewDeathsPerPopulation: ((country.NewDeaths * 100000) / population),\n                TotalRecoveredPerPopulation: ((country.TotalRecovered * 100000) / population),\n                NewRecoveredPerPopulation: ((country.NewRecovered * 100000) / population),\n            }\n        });\n\n\n        if (filterText !== '') {\n            data = data.filter(el => el['Country'].toLowerCase().includes(filterText.toLowerCase()))\n        }\n\n        let listItems = this.makeList(data);\n\n        return (\n            <div className=\"country-list-container\">\n                <h2>\n                    <span>Sorted by </span>\n                    <select onChange={this.onSelectChange}>\n                        <option defaultValue=\"total cases\">total cases</option>\n                        <option value=\"new cases\">new cases</option>\n                        <option value=\"total deaths\">total deaths</option>\n                        <option value=\"new deaths\">new deaths</option>\n                        <option value=\"total recovered\">total recovered</option>\n                        <option value=\"new recovered\">new recovered</option>\n                        <option value=\"total cases per 100k\">total cases per 100k</option>\n                        <option value=\"new cases per 100k\">new cases per 100k</option>\n                        <option value=\"total deaths per 100k\">total deaths per 100k</option>\n                        <option value=\"new deaths per 100k\">new deaths per 100k</option>\n                        <option value=\"total recovered per 100k\">total recovered per 100k</option>\n                        <option value=\"new recovered per 100k\">new recovered per 100k</option>\n                    </select>\n                </h2>\n                <input onChange={this.onInputChange} type=\"text\" />\n                <ul className=\"country-list\">\n                    {listItems}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CountryList;\n","/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js",[],"/media/Work/rs-school/covid19/covid19/src/constants/filters.js",[],"/media/Work/rs-school/covid19/covid19/src/constants/missed.js",[],"/media/Work/rs-school/covid19/covid19/src/services/sorting.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/table.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/tdItem.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/tooltip.js",[],"/media/Work/rs-school/covid19/covid19/src/services/calculations.js",[],"/media/Work/rs-school/covid19/covid19/src/services/selectFilters.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/legend.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":27},{"ruleId":"92","severity":1,"message":"96","line":9,"column":19,"nodeType":"94","messageId":"95","endLine":9,"endColumn":38},{"ruleId":"97","severity":1,"message":"98","line":60,"column":6,"nodeType":"99","endLine":60,"endColumn":78,"suggestions":"100"},{"ruleId":"92","severity":1,"message":"101","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"102","line":97,"column":17,"nodeType":"94","messageId":"95","endLine":97,"endColumn":25},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'getCovidCountries' is defined but never used.","Identifier","unusedVar","'getDataWorldLastDay' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'flags'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'filters' is defined but never used.","'sortedBy' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [indicatorsForFilter, summaries, dataWorldFromDays, dataCountryFromDays, flags]",{"range":"108","text":"109"},[2293,2365],"[indicatorsForFilter, summaries, dataWorldFromDays, dataCountryFromDays, flags]"]
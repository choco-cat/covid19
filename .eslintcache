[{"/media/Work/rs-school/covid19/covid19/src/index.js":"1","/media/Work/rs-school/covid19/covid19/src/components/root/index.js":"2","/media/Work/rs-school/covid19/covid19/src/api/covid.js":"3","/media/Work/rs-school/covid19/covid19/src/api/flags.js":"4","/media/Work/rs-school/covid19/covid19/src/constants/filters.js":"5","/media/Work/rs-school/covid19/covid19/src/components/summary/index.js":"6","/media/Work/rs-school/covid19/covid19/src/components/graph/index.js":"7","/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js":"8","/media/Work/rs-school/covid19/covid19/src/constants/missed.js":"9","/media/Work/rs-school/covid19/covid19/src/services/sorting.js":"10","/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js":"11","/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js":"12","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js":"13"},{"size":234,"mtime":1607690845456,"results":"14","hashOfConfig":"15"},{"size":2234,"mtime":1607963557078,"results":"16","hashOfConfig":"15"},{"size":4350,"mtime":1607960581293,"results":"17","hashOfConfig":"15"},{"size":818,"mtime":1607960581293,"results":"18","hashOfConfig":"15"},{"size":274,"mtime":1607960581336,"results":"19","hashOfConfig":"15"},{"size":686,"mtime":1607963557078,"results":"20","hashOfConfig":"15"},{"size":247,"mtime":1607963557077,"results":"21","hashOfConfig":"15"},{"size":7180,"mtime":1607963557077,"results":"22","hashOfConfig":"15"},{"size":1761,"mtime":1607960581336,"results":"23","hashOfConfig":"15"},{"size":226,"mtime":1607960581348,"results":"24","hashOfConfig":"15"},{"size":1156,"mtime":1607960581312,"results":"25","hashOfConfig":"15"},{"size":336,"mtime":1607963557083,"results":"26","hashOfConfig":"15"},{"size":1942,"mtime":1607963557083,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"90qc0p",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/Work/rs-school/covid19/covid19/src/index.js",[],["56","57"],"/media/Work/rs-school/covid19/covid19/src/components/root/index.js",["58"],"/media/Work/rs-school/covid19/covid19/src/api/covid.js",[],"/media/Work/rs-school/covid19/covid19/src/api/flags.js",[],"/media/Work/rs-school/covid19/covid19/src/constants/filters.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/graph/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js",["59"],"import React from 'react';\nimport { missedFlags, missedPopulations } from '../../constants/missed';\nimport { sortByParameter } from '../../services/sorting';\nimport { filters } from \"../../constants/filters\";\n\nimport './index.css';\n\nconst sortParameters = {\n    'total cases': 'TotalConfirmed',\n    'new cases': 'NewConfirmed',\n    'total deaths': 'TotalDeaths',\n    'new deaths': 'NewDeaths',\n    'total recovered': 'TotalRecovered',\n    'new recovered': 'NewRecovered',\n    'total cases per 100k': 'TotalConfirmedPerPopulation',\n    'new cases per 100k': 'NewConfirmedPerPopulation',\n    'total deaths per 100k': 'TotalDeathsPerPopulation',\n    'new deaths per 100k': 'NewDeathsPerPopulation',\n    'total recovered per 100k': 'TotalRecoveredPerPopulation',\n    'new recovered per 100k': 'NewRecoveredPerPopulation',\n};\n\nclass CountryList extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            sortedBy: 'total cases',\n            status: '',\n            period: '',\n            relative: '',\n            filterText: ''\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n              sortedBy: 'total cases',\n              status: this.props.filters.status,\n              period: this.props.filters.period,\n              relative: this.props.filters.relative,\n              filterText: ''\n          })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.sortedBy !== this.state.sortedBy) {\n            this.props.updateFilter({\n                status: this.state.status,\n                period: this.state.period,\n                relative: this.state.relative,\n                sortedBy: this.state.sortedBy,\n            });\n        }\n    }\n\n    makeList(data = []) {\n        const { sortedBy } = this.state;\n\n        return sortByParameter(data, sortParameters[sortedBy]).map((item, index) => {\n            const { Country, flag } = item;\n            const amount = item[sortParameters[sortedBy]];\n\n            return (\n                <li className=\"country-list-item\" key={index} onClick={() => this.props.handleClickOnCountry(Country)}>\n                    <img className=\"country-list-item-flag\" src={flag} alt=\"flag\"/>\n                    <span className=\"country-list-item-country\">{Country} </span>\n                    {amount}\n                </li>\n            )\n        })\n    }\n\n    onSortChange = (sortedBy) => {\n        //TODO Отрефакторить\n        switch (sortedBy) {\n            case 'total cases':\n                this.setState({ sortedBy: 'new cases', status: filters.status.confirmed, relative: filters.relative.absolute, period: filters.period.lastDay } );\n                break;\n            case 'new cases':\n                this.setState({ sortedBy: 'total deaths', status: filters.status.deaths, relative: filters.relative.absolute, period: filters.period.all } );\n                break;\n            case 'total deaths':\n                this.setState({ sortedBy: 'new deaths', status: filters.status.deaths, relative: filters.relative.absolute, period: filters.period.lastDay } );\n                break;\n            case 'new deaths':\n                this.setState({ sortedBy: 'total recovered', status: filters.status.recovered, relative: filters.relative.absolute, period: filters.period.all } );\n                break;\n            case 'total recovered':\n                this.setState({ sortedBy: 'new recovered', status: filters.status.recovered, relative: filters.relative.absolute, period: filters.period.lastDay });\n                break;\n            case 'new recovered':\n                this.setState({ sortedBy: 'total cases per 100k', status: filters.status.confirmed, relative: filters.relative.to100men, period: filters.period.all } );\n                break;\n            case 'total cases per 100k':\n                this.setState({ sortedBy: 'new cases per 100k', status: filters.status.confirmed, relative: filters.relative.to100men, period: filters.period.lastDay } );\n                break;\n            case 'new cases per 100k':\n                this.setState({ sortedBy: 'total deaths per 100k', status: filters.status.deaths, relative: filters.relative.to100men, period: filters.period.all } );\n                break;\n            case 'total deaths per 100k':\n                this.setState({ sortedBy: 'new deaths per 100k', status: filters.status.deaths, relative: filters.relative.to100men, period: filters.period.lastDay } );\n                break;\n            case 'new deaths per 100k':\n                this.setState({ sortedBy: 'total recovered per 100k', status: filters.status.recovered, relative: filters.relative.to100men, period: filters.period.all } );\n                break;\n            case 'total recovered per 100k':\n                this.setState({ sortedBy: 'new recovered per 100k', status: filters.status.recovered, relative: filters.relative.to100men, period: filters.period.lastDay } );\n                break;\n            case 'new recovered per 100k':\n                this.setState({ sortedBy: 'total cases', status: filters.status.confirmed, relative: filters.relative.absolute, period: filters.period.all } );\n                break;\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({filterText: e.target.value});\n    };\n\n    render() {\n        const { summaries = [], flags = [] } = this.props;\n        const { sortedBy, filterText } = this.state;\n\n        let data = summaries.map((country) => {\n            const [selectedCountry] = flags.filter(item => item.name === country.Country);\n            const population = selectedCountry ? selectedCountry.population : missedPopulations[country.Country];\n\n            return {\n                ...country,\n                flag: selectedCountry ? selectedCountry.flag : missedFlags[country.Country],\n                population,\n                TotalConfirmedPerPopulation: Math.round((country.TotalConfirmed * 100000) / population),\n                NewConfirmedPerPopulation: Math.round((country.NewConfirmed * 100000) / population),\n                TotalDeathsPerPopulation: Math.round((country.TotalDeaths * 100000) / population),\n                NewDeathsPerPopulation: Math.round((country.NewDeaths * 100000) / population),\n                TotalRecoveredPerPopulation: Math.round((country.TotalRecovered * 100000) / population),\n                NewRecoveredPerPopulation: Math.round((country.NewRecovered * 100000) / population),\n            }\n        });\n\n\n        if (filterText !== '') {\n            data = data.filter(el => el['Country'].toLowerCase().includes(filterText.toLowerCase()))\n        }\n\n        let listItems = this.makeList(data);\n\n        return (\n            <div className=\"country-list-container\">\n                <h2>\n                    <span>Sorted by </span>\n                    <span onClick={() => this.onSortChange(sortedBy)} className=\"country-list-sortBy\">{sortedBy}</span>\n                </h2>\n                <input onChange={this.onInputChange} type=\"text\" />\n                <ul className=\"country-list\">\n                    {listItems}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CountryList;\n","/media/Work/rs-school/covid19/covid19/src/constants/missed.js",[],"/media/Work/rs-school/covid19/covid19/src/services/sorting.js",[],"/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":13,"column":10,"nodeType":"66","messageId":"67","endLine":13,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":74,"column":9,"nodeType":"70","messageId":"71","endLine":111,"endColumn":10},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'countries' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]
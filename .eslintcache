[{"/media/Work/rs-school/covid19/covid19/src/index.js":"1","/media/Work/rs-school/covid19/covid19/src/components/root/index.js":"2","/media/Work/rs-school/covid19/covid19/src/api/covid.js":"3","/media/Work/rs-school/covid19/covid19/src/api/flags.js":"4","/media/Work/rs-school/covid19/covid19/src/components/graph/index.js":"5","/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js":"6","/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js":"7","/media/Work/rs-school/covid19/covid19/src/constants/filters.js":"8","/media/Work/rs-school/covid19/covid19/src/constants/missed.js":"9","/media/Work/rs-school/covid19/covid19/src/services/sorting.js":"10","/media/Work/rs-school/covid19/covid19/src/components/summary/index.js":"11","/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js":"12","/media/Work/rs-school/covid19/covid19/src/components/summary/table.js":"13","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js":"14","/media/Work/rs-school/covid19/covid19/src/components/summary/tdItem.js":"15","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/tooltip.js":"16","/media/Work/rs-school/covid19/covid19/src/services/calculations.js":"17","/media/Work/rs-school/covid19/covid19/src/services/selectFilters.js":"18","/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/legend.js":"19","/media/Work/rs-school/covid19/covid19/src/services/cache.js":"20","/media/Work/rs-school/covid19/covid19/src/components/filters/index.js":"21"},{"size":234,"mtime":1607690845456,"results":"22","hashOfConfig":"23"},{"size":4525,"mtime":1608558175223,"results":"24","hashOfConfig":"23"},{"size":3781,"mtime":1608463098807,"results":"25","hashOfConfig":"23"},{"size":998,"mtime":1608463098808,"results":"26","hashOfConfig":"23"},{"size":2203,"mtime":1608463098809,"results":"27","hashOfConfig":"23"},{"size":9531,"mtime":1608463098808,"results":"28","hashOfConfig":"23"},{"size":2345,"mtime":1608463098808,"results":"29","hashOfConfig":"23"},{"size":440,"mtime":1608546286806,"results":"30","hashOfConfig":"23"},{"size":1761,"mtime":1608024900508,"results":"31","hashOfConfig":"23"},{"size":226,"mtime":1608287961667,"results":"32","hashOfConfig":"23"},{"size":9647,"mtime":1608571212874,"results":"33","hashOfConfig":"23"},{"size":382,"mtime":1608476112929,"results":"34","hashOfConfig":"23"},{"size":902,"mtime":1608476129509,"results":"35","hashOfConfig":"23"},{"size":5582,"mtime":1608476112929,"results":"36","hashOfConfig":"23"},{"size":102,"mtime":1608476129510,"results":"37","hashOfConfig":"23"},{"size":941,"mtime":1608476112930,"results":"38","hashOfConfig":"23"},{"size":4603,"mtime":1608476112930,"results":"39","hashOfConfig":"23"},{"size":2595,"mtime":1608459892256,"results":"40","hashOfConfig":"23"},{"size":2590,"mtime":1608476112929,"results":"41","hashOfConfig":"23"},{"size":245,"mtime":1608463098810,"results":"42","hashOfConfig":"23"},{"size":2921,"mtime":1608558440282,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"90qc0p",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/Work/rs-school/covid19/covid19/src/index.js",[],["89","90"],"/media/Work/rs-school/covid19/covid19/src/components/root/index.js",[],"/media/Work/rs-school/covid19/covid19/src/api/covid.js",[],"/media/Work/rs-school/covid19/covid19/src/api/flags.js",[],"/media/Work/rs-school/covid19/covid19/src/components/graph/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/countryList/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/graph/chart/index.js",[],"/media/Work/rs-school/covid19/covid19/src/constants/filters.js",[],"/media/Work/rs-school/covid19/covid19/src/constants/missed.js",[],"/media/Work/rs-school/covid19/covid19/src/services/sorting.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/table.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/index.js",[],"/media/Work/rs-school/covid19/covid19/src/components/summary/tdItem.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/tooltip.js",[],"/media/Work/rs-school/covid19/covid19/src/services/calculations.js",["91","92","93"],"import { endOfToday } from \"date-fns\";\nimport { format } from 'date-fns';\nimport {filters} from \"../constants/filters\";\n\nconst populationWorld = 7 * 10 ** 9;\n\n/*\nВозвращает статистику всех статусов по стране по всем датам на 100 тыс. населения, массив объектов вида\n{\nCountry: \"China\",\nCountryCode: \"\",\nCityCode: \"\",\nLat: \"0\",\nLon: \"0\",\nConfirmed: 0.08,\nDeaths: 0.056,\nRecovered: 0.023,\nDate: \"2020-12-10T00:00:00Z\"\n}\ncountry_slug = название страны, все маленькие буквы\n*/\n\nexport const calc100Men = (data, population) => {\n  return data.map((el) => ({\n    TotalConfirmed: Math.round(el.TotalConfirmed / (population / 10 ** 5) * 100) / 100,\n    TotalDeaths: Math.round(el.TotalDeaths / (population / 10 ** 5) * 100) / 100,\n    TotalRecovered: Math.round(el.TotalRecovered / (population / 10 ** 5) * 100) / 100,\n    NewConfirmed: Math.round(el.NewConfirmed / (population / 10 ** 5) * 100) / 100,\n    NewDeaths: Math.round(el.NewDeaths / (population / 10 ** 5) * 100) / 100,\n    NewRecovered: Math.round(el.NewRecovered / (population / 10 ** 5) * 100) / 100,\n    Date: el.Date,\n  }));\n};\n\n\n/*Итоговые данные по миру, объект вида\n {\n  NewConfirmed: 623213, //Последний день\n  TotalConfirmed: 71694121,\n  NewDeaths: 10224, //Последний день\n  TotalDeaths: 1604878,\n  NewRecovered: 1506921, //Последний день\n  TotalRecovered: 46848398\n} */\n/*\n  filters: status = 'TotalConfirmed', relative = 'Absolute', period = 'lastDay'\n*/\n\nexport const getDataWorldLastDay = (data, filters) => {\n  if (!data) {\n    return;\n  }\n\n  const currentDate = endOfToday();\n  let result = [...data];\n\n  if (filters.relative === 'To100men') {\n    result = calc100Men(result, populationWorld);\n  }\n\n   result = result.map((el) => {\n    return { Date: currentDate, Data: el[filters.status] };\n  });\n\n  return result;\n};\n\n//Данные для мира и по выбранной стране по дням\nexport const getData = (data, filters, population = populationWorld) => {\n  if (!data) {\n    return;\n  }\n\n  let result = [...data];\n  let filtersStatus = filters.status;\n  let currentDate = false;\n\n  //Данные за последний  день\n  if(result.length === 1) {\n    currentDate = endOfToday();\n    filtersStatus = filters.status.replace('Total', 'New');\n  }\n  if (filters.relative === 'To100men') {\n    result = calc100Men(result, population);\n  }\n\n  result = result.map((el) => {\n    //Костыль, что-то не так со статистикой в API у Китая в один день\n    if(filters.geography === 'China' && el.TotalConfirmed > 6000000) {\n      el.TotalConfirmed = 90100;\n    }\n    return { Date: currentDate ? format(new Date(currentDate), 'dd-MMM-yyyy') : format(new Date(el.Date),'dd-MMM-yyyy'), ...el};\n  });\n\n  return result;\n};\n\nexport const getDataCountries = (data, globalFilters) => {\n  if (!data) {\n    return;\n  }\n\n  let result = [...data];\n  let filtersStatus = globalFilters.status;\n  let currentDate;\n  //Данные за последний день, передать сюда константу filters\n  if(globalFilters.period === filters.period.lastDay) {\n    currentDate = endOfToday();\n    filtersStatus = globalFilters.status.replace('Total', 'New');\n  }\n  result = result.map((el) => {\n    return { Data: el[filtersStatus], ...el };\n  });\n\n  if (globalFilters.relative === 'To100men') {\n    result = result.map((el) => {\n      return {\n    ...el,\n     Data: Math.round( el.Data / (el.population / 10 ** 5) * 100) / 100\n     }});\n  }\n\n  return result;\n};\n\nexport const getColorsFromFilters = (status) => {\n  let color;\n  switch (status) {\n    case filters.status.recovered:\n      color = `39,150,3`;\n      break;\n    case filters.status.deaths:\n      color =  `0,23,144`;\n      break;\n    default:\n      color =  `245,0,0`;\n      break;\n  }\n  return color;\n};\n\nexport const getFilterName = (value) => {\n  let result;\n  switch (value) {\n    case filters.status.recovered:\n      result = 'Recovered';\n      break;\n    case filters.status.deaths:\n      result =  'Deaths';\n      break;\n    case filters.status.confirmed:\n      result =  'Confirmed';\n      break;\n    case filters.period.all:\n      result = 'All Time';\n      break;\n    case filters.period.lastDay:\n      result =  'Last Day';\n      break;\n    case filters.relative.absolute:\n      result =  'Absolute';\n      break;\n    case filters.relative.to100men:\n      result =  'Per 100k';\n      break;\n  }\n  return result;\n};","/media/Work/rs-school/covid19/covid19/src/services/selectFilters.js",[],"/media/Work/rs-school/covid19/covid19/src/components/worldMap/map/legend.js",["94"],"import React, {useState} from 'react';\nimport Draggable from 'react-draggable';\nimport { ReactComponent as ToggleSize } from \"../../../icons/small.svg\";\nimport { ReactComponent as Expand } from \"../../../icons/expand.svg\";\nimport { getColorsFromFilters, getFilterName } from '../../../services/calculations';\nimport { filters } from \"../../../constants/filters\";\nimport Filters from \"../../filters\";\n\nconst Legend = ({ data, diffCoeff, globalFilters, updateFilters }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [fullSize, setSize] = useState(true);\n  const defaultPosition = {x: 0, y: 0};\n\n  const handleToggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n\n  const options = {'status': true, 'relative': true, 'period': true};\n  const handleToggSize = () => {\n    setSize(!fullSize);\n  };\n\n  const roundDijit = (globalFilters.relative === filters.relative.to100men) ? 2 : 0;\n  const userLang = navigator.language;\n\n  return (\n    <Draggable position={expanded ? defaultPosition : null}>\n      <div className={`map-legend ${expanded ? 'expanded' : ''}`}>\n        <div className=\"controls\">\n          <div className=\"title\">Legend</div>\n          <ToggleSize className=\"controls-icons\" onClick={handleToggSize} style={{display: !expanded ? 'inline-block' : 'none'}} />\n          <Expand className=\"controls-icons\" onClick={handleToggleExpanded} style={{display: fullSize ? 'inline-block' : 'none'}} />\n        </div>\n        {\n          fullSize ? (\n              <>\n            <Filters globalFilters={globalFilters} updateFilters={updateFilters} options={options}/>\n            <table style={{margin: 'auto'}}>\n              <thead>\n              <tr>\n                <th>Colors</th>\n                <th>{getFilterName(globalFilters.status)} {getFilterName(globalFilters.relative)} {getFilterName(globalFilters.period)}</th>\n              </tr>\n              </thead>\n              <tbody>\n              {\n                data.sort().map((value, index) => (\n                  <tr key={index}>\n                    <td style={{width: '25px', backgroundColor: `rgba(${getColorsFromFilters(globalFilters.status)},${value})`}} />\n                    <td>\n                      from {(new Intl.NumberFormat(userLang, { minimumFractionDigits: 0, maximumFractionDigits: 2}).format((value * diffCoeff).toFixed(roundDijit)))}\n                    </td>\n                  </tr>\n                ))\n              }\n              </tbody>\n            </table>\n            </>\n          ) : null\n        }\n      </div>\n    </Draggable>\n  )\n};\n\nexport default React.memo(Legend);\n","/media/Work/rs-school/covid19/covid19/src/services/cache.js",[],"/media/Work/rs-school/covid19/covid19/src/components/filters/index.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":81,"column":5,"nodeType":"101","messageId":"102","endLine":81,"endColumn":18},{"ruleId":"99","severity":1,"message":"103","line":108,"column":5,"nodeType":"101","messageId":"102","endLine":108,"endColumn":16},{"ruleId":"104","severity":1,"message":"105","line":144,"column":3,"nodeType":"106","messageId":"107","endLine":166,"endColumn":4},{"ruleId":"99","severity":1,"message":"108","line":6,"column":8,"nodeType":"101","messageId":"102","endLine":6,"endColumn":15},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'filtersStatus' is assigned a value but never used.","Identifier","unusedVar","'currentDate' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Filters' is defined but never used.","no-global-assign","no-unsafe-negation"]